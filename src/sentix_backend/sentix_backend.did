type CreateConcert = variant { Ok : Event; Err : CreateConcertErr };
type CreateConcertErr = variant { UserDoesNotExist : principal };
type Event = record {
  id : principal;
  title : text;
  date : text;
  description : text;
  image : blob;
  price : nat64;
};
type Image = record { image_id : principal; image : blob };
type Ticket = record {
  id : principal;
  user_id : principal;
  timestamp : nat64;
  event_id : principal;
  price : nat64;
};
type TicketResult = variant { Ok : Ticket; Err : text };
type UploadImageResult = variant { Ok : Image };
type User = record {
  id : principal;
  creating_ids : vec principal;
  username : text;
  created_at : nat64;
};
service : () -> {
  buy_resale_ticket : (nat64) -> (text);
  buy_ticket : (principal, nat64) -> (TicketResult);
  create_event : (text, text, text, nat64, blob) -> (CreateConcert);
  create_user : (text) -> (User);
  get_all_events : () -> (vec Event) query;
  get_event_by_id : (principal) -> (opt Event) query;
  get_events : () -> (vec Event) query;
  get_images : () -> (vec Image) query;
  get_ticket : (principal) -> (opt Ticket) query;
  get_user_tokens : () -> (int);
  get_users : () -> (vec User) query;
  resale_ticket : (principal, nat64) -> (opt Ticket);
  reward_tokens : (int) -> (text);
  spend_tokens : (int) -> (text);
  upload_image : (blob) -> (UploadImageResult);
}
